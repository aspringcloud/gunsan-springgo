# Generated by Django 3.0.7 on 2020-07-08 15:46

import api.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='uploads', verbose_name='키오스크 광고이미지')),
                ('duration', models.TimeField(blank=True, default='01:00:00', verbose_name='광고 노출 시간')),
                ('description', models.TextField(blank=True, default='설명', null=True, verbose_name='광고 설명')),
            ],
        ),
        migrations.CreateModel(
            name='AireQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Easymile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(blank=True, max_length=25, verbose_name='VIN')),
                ('firmware', models.CharField(blank=True, max_length=25, verbose_name='Firmware version')),
            ],
        ),
        migrations.CreateModel(
            name='Fleet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(blank=True, max_length=25, verbose_name='VIN')),
                ('firmware', models.CharField(blank=True, max_length=25, verbose_name='Firmware version')),
                ('modeltype', models.PositiveSmallIntegerField(choices=[(0, 'Navya'), (1, 'Kamo'), (2, 'Easymile')], default=0, verbose_name='Model type')),
            ],
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Kamo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(blank=True, max_length=25, verbose_name='VIN')),
                ('firmware', models.CharField(blank=True, max_length=25, verbose_name='Firmware version')),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=50, null=True, verbose_name='관리자 이름')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='관리자 이메일')),
                ('team', models.CharField(blank=True, max_length=25, null=True, verbose_name='관리자 소속')),
                ('phone', models.CharField(default='000-0000-0000', max_length=25, verbose_name='관리자 핸드폰')),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'operator'), (2, 'manager'), (3, 'supervisor')], default=1, help_text='1:Operator, 2:Manager, 3:Supervisor', verbose_name='접근권한')),
                ('photo', models.ImageField(blank=True, upload_to='uploads', verbose_name='관리자 사진')),
            ],
        ),
        migrations.CreateModel(
            name='MicrosoftGraph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('token', models.TextField(blank=True, null=True, verbose_name='token')),
            ],
        ),
        migrations.CreateModel(
            name='Navya',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vin', models.CharField(blank=True, max_length=25, verbose_name='VIN')),
                ('firmware', models.CharField(blank=True, max_length=25, verbose_name='Firmware version')),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, default='title', max_length=50, null=True, verbose_name='제목')),
                ('category', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Common'), (2, 'integrated control'), (3, 'integrated dashboard')], default=1, null=True, verbose_name='구분')),
                ('contents', models.TextField(blank=True, null=True, verbose_name='내용')),
                ('pin', models.BooleanField(default=False, verbose_name='고정유무')),
            ],
        ),
        migrations.CreateModel(
            name='OperationIssue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='주요이슈')),
            ],
        ),
        migrations.CreateModel(
            name='OperationQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True, verbose_name='주요질문')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='S000', max_length=25, verbose_name='운영장소 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='운영장소 이름')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='운영장소 요약')),
                ('summary2', models.TextField(blank=True, null=True, verbose_name='운영장소 요약2')),
                ('operation', models.BooleanField(default=False, verbose_name='운영중')),
                ('address', models.TextField(blank=True, null=True, verbose_name='운영장소주소')),
                ('image', models.ImageField(blank=True, upload_to='uploads', verbose_name='emergency contact')),
                ('current_weather', models.CharField(blank=True, max_length=100, null=True, verbose_name='현재날씨')),
                ('weather_forecast', models.CharField(blank=True, max_length=300, null=True, verbose_name='날씨예보')),
                ('air_quality', models.CharField(blank=True, max_length=250, null=True, verbose_name='대기상태')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='S000', max_length=25, verbose_name='정류소 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='정류소 이름')),
                ('operation', models.BooleanField(default=False, verbose_name='운영중')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='정류소 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='정류소 경도')),
                ('eta', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, default=list, null=True, size=None, verbose_name='Estimated time of arrival')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='V000', max_length=25, verbose_name='차량 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='차량 이름')),
                ('licence', models.CharField(blank=True, max_length=50, null=True, verbose_name='차량 라이선스')),
                ('drive', models.BooleanField(blank=True, default=False, null=True, verbose_name='차량 운행중')),
                ('gnss', models.BooleanField(blank=True, default=False, null=True, verbose_name='GNSS 작동중')),
                ('speed', models.IntegerField(blank=True, null=True, verbose_name='차량 속도')),
                ('hitratio', models.IntegerField(blank=True, null=True, verbose_name='GNSS 감도')),
                ('battery', models.IntegerField(blank=True, null=True, verbose_name='Battery 상태')),
                ('passenger', models.IntegerField(blank=True, null=True, verbose_name='현재탑승객수')),
                ('heading', models.IntegerField(blank=True, null=True, verbose_name='차량 방향')),
                ('lights', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(default=False), blank=True, default=list, null=True, size=None, verbose_name='차량 Light유무')),
                ('door', models.BooleanField(blank=True, default=False, null=True, verbose_name='문열림')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='차량 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='차량 경도')),
                ('operation_mode', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'always'), (2, 'event'), (3, 'test')], default=1, null=True, verbose_name='운행모드')),
                ('state', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'closed'), (2, 'pending'), (3, 'open'), (4, 'operating')], default=1, null=True, verbose_name='상태')),
                ('drive_mode', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'dynamic'), (2, 'static'), (3, 'test'), (4, 'static&dynamic')], default=1, null=True, verbose_name='주행모드')),
                ('webcam1', models.URLField(blank=True, null=True, verbose_name='카메라#1 URL')),
                ('webcam2', models.URLField(blank=True, null=True, verbose_name='카메라#2 URL')),
                ('webcam3', models.URLField(blank=True, null=True, verbose_name='카메라#3 URL')),
                ('webcam4', models.URLField(blank=True, null=True, verbose_name='카메라#4 URL')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='운행중 누적거리(km)')),
                ('brakeactuator', models.FloatField(blank=True, null=True, verbose_name='브레이크 모터')),
                ('parkingbrake', models.FloatField(blank=True, null=True, verbose_name='주차 브레이크')),
                ('rpm', models.FloatField(blank=True, null=True, verbose_name='차량 RPM')),
                ('odd', models.FileField(blank=True, null=True, upload_to=api.models.get_oddfile_path, verbose_name='ODD 파일')),
                ('wheelbase_speed', models.FloatField(blank=True, null=True, verbose_name='휠기반 차량 속도')),
                ('isparked', models.BooleanField(blank=True, default=False, null=True, verbose_name='주차여부')),
                ('eta', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), blank=True, default=list, null=True, size=None, verbose_name='Estimated time of arrival')),
                ('model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Fleet', verbose_name='차량 모델')),
                ('passed_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Station', verbose_name='막지나온역')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='V2X',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='VX000', max_length=25, verbose_name='V2X 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='V2X 이름')),
                ('operation', models.BooleanField(default=False, verbose_name='작동중')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='V2X 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='V2X 경도')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(default='000-0000-0000', max_length=25)),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'operator'), (2, 'manager'), (3, 'supervisor')], default=1, verbose_name='level')),
                ('photo', models.ImageField(blank=True, upload_to='uploads')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='R000', max_length=25, verbose_name='경로 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='경로 이름')),
                ('start', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=16, max_digits=22), blank=True, default=list, null=True, size=None, verbose_name='경로시작위치')),
                ('end', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=16, max_digits=22), blank=True, default=list, null=True, size=None, verbose_name='경로끝위치')),
                ('operation', models.BooleanField(default=False, verbose_name='운영중')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
            ],
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now=True, verbose_name='생성시간')),
                ('time_start', models.DateTimeField(blank=True, null=True, verbose_name='시작시간')),
                ('time_end', models.DateTimeField(blank=True, null=True, verbose_name='종료시간')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='하루누적주행거리(km)')),
                ('passenger', models.IntegerField(blank=True, null=True, verbose_name='하루누적탑승객수(명)')),
                ('event', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'inspection'), (2, 'testing'), (3, 'demo'), (4, 'exhibition')], default=1, null=True, verbose_name='이벤트')),
                ('task', models.TextField(blank=True, null=True, verbose_name='Task')),
                ('weather', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'sunny'), (2, 'cloudy'), (3, 'rainy'), (4, 'snowing'), (5, 'windy'), (6, 'foggy')], default=1, null=True, verbose_name='하루평균날씨')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='하루평균실외온도')),
                ('issue', models.ManyToManyField(blank=True, to='api.OperationIssue', verbose_name='주요이슈')),
                ('question', models.ManyToManyField(blank=True, to='api.OperationQuestion', verbose_name='주요질문')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='오퍼레이터')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Vehicle', verbose_name='차량 관리 ID')),
            ],
        ),
        migrations.CreateModel(
            name='Kiosk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='K000', max_length=25, verbose_name='키오스크 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='키오스크 이름')),
                ('sn', models.CharField(blank=True, max_length=50, null=True, verbose_name='시리얼 번호')),
                ('operation', models.BooleanField(default=False, verbose_name='운영중')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='키오스크 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='키오스크 경도')),
                ('password', models.DecimalField(decimal_places=0, default=123456, max_digits=6, verbose_name='키오스크 암호')),
                ('ad', models.ManyToManyField(blank=True, to='api.Advertisement', verbose_name='키오스크 광고')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='Garage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='G000', max_length=25, verbose_name='차고지 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='차고지 이름')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='차고지 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='차고지 경도')),
                ('door', models.BooleanField(default=False, verbose_name='차고지 문열림')),
                ('temperature', models.FloatField(blank=True, null=True, verbose_name='차고지 온도')),
                ('humidity', models.FloatField(blank=True, null=True, verbose_name='차고지 습도')),
                ('charger', models.BooleanField(default=False, verbose_name='차고지 충전유무')),
                ('operation', models.BooleanField(default=False, verbose_name='운영중')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
        migrations.CreateModel(
            name='DataHub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mid', models.CharField(default='DC000', max_length=25, verbose_name='데이터허브 관리 ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, verbose_name='데이터허브 이름')),
                ('operation', models.BooleanField(default=False, verbose_name='작동중')),
                ('lat', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='데이터허브 위도')),
                ('lon', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True, verbose_name='데이터허브 경도')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='데이터허브 요약')),
                ('address', models.TextField(blank=True, null=True, verbose_name='데이터허브 주소')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Site', verbose_name='운영장소')),
                ('user', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='관리자')),
            ],
        ),
    ]
